<?php
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º "headers already sent"
 */

echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ ===\n\n";

function checkFileForWhitespace($filePath) {
    $content = file_get_contents($filePath);
    $issues = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã/—Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–¥ <?php
    if (preg_match('/^[\s\r\n]+<\?php/', $content)) {
        $issues[] = "–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –ø–µ—Ä–µ–¥ <?php";
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã –ø–æ—Å–ª–µ ?>
    if (preg_match('/\?>\s*[^\s]/', $content)) {
        $issues[] = "–ù–∞–π–¥–µ–Ω—ã —Å–∏–º–≤–æ–ª—ã –ø–æ—Å–ª–µ ?>";
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ
    if (preg_match('/\?>\s*$/', $content) && strpos($filePath, 'template') === false) {
        $issues[] = "–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ ?> –≤ –∫–æ–Ω—Ü–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–±—Ä–∞—Ç—å –¥–ª—è PHP —Ñ–∞–π–ª–æ–≤)";
    }
    
    return $issues;
}

function scanDirectory($directory) {
    $problems = [];
    $iterator = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator($directory),
        RecursiveIteratorIterator::SELF_FIRST
    );
    
    foreach ($iterator as $file) {
        if ($file->isFile() && $file->getExtension() === 'php') {
            $filePath = $file->getRealPath();
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            if (strpos($filePath, 'phpmailer') !== false || strpos($filePath, 'wireframe') !== false) {
                continue;
            }
            
            $issues = checkFileForWhitespace($filePath);
            if (!empty($issues)) {
                $problems[$filePath] = $issues;
            }
        }
    }
    
    return $problems;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
$directories = [
    __DIR__ . '/../src',
    __DIR__ . '/../public',
    __DIR__ . '/../'
];

$allProblems = [];
foreach ($directories as $dir) {
    if (is_dir($dir)) {
        $problems = scanDirectory($dir);
        $allProblems = array_merge($allProblems, $problems);
    }
}

if (empty($allProblems)) {
    echo "‚úÖ –ü—Ä–æ–±–ª–µ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n";
} else {
    echo "‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–∞–π–ª–∞—Ö:\n\n";
    foreach ($allProblems as $file => $issues) {
        echo "üìÅ " . basename($file) . "\n";
        foreach ($issues as $issue) {
            echo "   ‚ö†Ô∏è  $issue\n";
        }
        echo "\n";
    }
    
    echo "\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n";
    echo "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–º —Ç–µ–≥–æ–º\n";
    echo "2. –£–¥–∞–ª–∏—Ç–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ PHP —Ñ–∞–π–ª–æ–≤\n";  
    echo "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é –≤—ã–≤–æ–¥–∞ ob_start() –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤\n";
    echo "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–æ–≤ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å UTF-8 –±–µ–∑ BOM)\n";
}

echo "\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===\n";

